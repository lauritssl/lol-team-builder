{"version":3,"sources":["components.js","directives\\directives.js","filters\\filters.js","services\\services.js","directives\\pristineOriginal\\pristineOriginal.js","directives\\validateCustom\\validateCustom.js","filters\\limitEllipsis\\limitEllipsis.js","filters\\offset\\offset.js","filters\\partition\\partition.js","filters\\shuffle\\shuffle.js","filters\\slugify\\slugify.js","filters\\spaceSentences\\spaceSentences.js","filters\\stripTags\\stripTags.js","services\\debounce\\debounce.js","services\\memoize\\memoize.js","services\\filterStabilize\\filterStabilize.js","services\\rethrowException\\rethrowException.js","directives\\pristineOriginal\\tests\\pristineOriginal.spec.js","directives\\validateCustom\\tests\\validateCustom.spec.js","services\\debounce\\tests\\debounce.spec.js","services\\memoize\\tests\\memoize.spec.js","services\\filterStabilize\\tests\\filterStabilize.spec.js"],"names":[],"mappings":"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","file":"components.min.js","sourcesContent":["angular.module('pmkr.components', [\r\n  'pmkr.components.filters',\r\n  'pmkr.components.services',\r\n  'pmkr.components.directives'\r\n]);","angular.module('pmkr.components.directives', [\r\n  'pmkr.pristineOriginal',\r\n  'pmkr.validateCustom'\r\n]);","angular.module('pmkr.components.filters', [\r\n  'pmkr.offset',\r\n  'pmkr.partition',\r\n  'pmkr.shuffle',\r\n  'pmkr.slugify',\r\n  'pmkr.stripTags',\r\n  'pmkr.spaceSentences',\r\n  'pmkr.limitEllipsis'\r\n]);","angular.module('pmkr.components.services', [\r\n  'pmkr.debounce',\r\n  'pmkr.memoize',\r\n  'pmkr.filterStabilize',\r\n  'pmkr.rethrowException'\r\n]);","angular.module('pmkr.pristineOriginal', [])\r\n\r\n.directive('pmkrPristineOriginal', [\r\n  function() {\r\n\r\n    var directive = {\r\n      restrict : 'A',\r\n      require : 'ngModel',\r\n      link: function($scope, $element, $attrs, $ngModel) {\r\n\r\n        var defaults = {\r\n          caseSensitive: true\r\n        };\r\n        var opts = $scope.$eval($attrs.pmkrPristineOriginal);\r\n        opts = angular.extend(defaults, opts);\r\n\r\n        var pristineVal = null;\r\n\r\n        $scope.$watch(function() {\r\n          return $ngModel.$viewValue;\r\n        }, function(val) {\r\n\r\n          // set pristineVal to newVal the first time this function runs\r\n          if (pristineVal === null) {\r\n            pristineVal = $ngModel.$isEmpty(val) ? '' : val.toString();\r\n          }\r\n\r\n          // determine/set $pristine state\r\n          var shouldBePristine;\r\n          if (pristineVal === val) {\r\n            shouldBePristine = true;\r\n          } else if (!opts.caseSensitive && pristineVal.toLowerCase() === val.toLowerCase()) {\r\n            shouldBePristine = true;\r\n          }\r\n          shouldBePristine && $ngModel.$setPristine();\r\n\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n    return directive;\r\n\r\n  }\r\n])\r\n\r\n;","angular.module('pmkr.validateCustom', [\r\n  'pmkr.debounce'\r\n])\r\n\r\n.directive('pmkrValidateCustom', [\r\n  '$q',\r\n  'pmkr.debounce',\r\n  function($q, debounce) {\r\n\r\n    var directive = {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      // set priority so that other directives can change ngModel state ($pristine, etc) before gate function\r\n      priority: 1,\r\n      link: function($scope, $element, $attrs, $ngModel) {\r\n\r\n        var opts = $scope.$eval($attrs.pmkrValidateCustom);\r\n\r\n        // this reference is used as a convenience for $scope[opts.props]\r\n        var props = {\r\n          pending : false,\r\n          validating : false,\r\n          checkedValue : null,\r\n          valid : null,\r\n          invalid : null\r\n        };\r\n        // if opts.props is set, assign props to $scope\r\n        opts.props && ($scope[opts.props] = props);\r\n\r\n        // debounce validation function\r\n        var debouncedFn = debounce(validate, opts.wait);\r\n        var latestFn = debounce.latest(debouncedFn);\r\n\r\n        // initially valid\r\n        $ngModel.$setValidity(opts.name, true);\r\n\r\n        // track gated state\r\n        var gate;\r\n\r\n        $scope.$watch(function() {\r\n          return $ngModel.$viewValue;\r\n        }, valueChange);\r\n\r\n        // set model validity and props based on gated state\r\n        function setValidity(isValid) {\r\n          $ngModel.$setValidity(opts.name, isValid);\r\n          if (gate) {\r\n            props.valid = props.invalid = null;\r\n          } else {\r\n            props.valid = !(props.invalid = !isValid);\r\n          }\r\n        }\r\n\r\n        function validate(val) {\r\n          if (gate) { return; }\r\n          props.validating = true;\r\n          return opts.fn(val);\r\n        }\r\n\r\n        function valueChange(val) {\r\n\r\n          if (opts.gate && (gate = opts.gate(val, $ngModel))) {\r\n            props.pending = props.validating = false;\r\n            setValidity(true);\r\n            return;\r\n          }\r\n\r\n          props.pending = true;\r\n          props.valid = props.invalid = null;\r\n\r\n          latestFn(val).then(function(isValid) {\r\n            if (gate) { return; }\r\n            props.checkedValue = val;\r\n            setValidity(isValid);\r\n            props.pending = props.validating = false;\r\n          });\r\n\r\n        }\r\n\r\n      } // link\r\n\r\n    }; // directive\r\n\r\n    return directive;\r\n\r\n  }\r\n])\r\n\r\n;","angular.module('pmkr.limitEllipsis', [\r\n  'pmkr.stripTags',\r\n  'pmkr.spaceSentences'\r\n])\r\n\r\n.filter('pmkr.limitEllipsis', [\r\n  '$filter',\r\n  function($filter) {\r\n\r\n    var stripTags = $filter('pmkr.stripTags');\r\n    var spaceSentences = $filter('pmkr.spaceSentences');\r\n    var limitTo = $filter('limitTo');\r\n\r\n    function filter(str, limit, ellipsis) {\r\n\r\n      if (!str || !str.length) { return str; }\r\n\r\n      ellipsis = ellipsis || '...';\r\n\r\n      var text = spaceSentences(stripTags(str));\r\n\r\n      var limited = limitTo(text, limit);\r\n\r\n      if (limited === text) {\r\n        return limited;\r\n      }\r\n\r\n      return limited+ellipsis;\r\n\r\n    }\r\n\r\n    return filter;\r\n\r\n  }\r\n])\r\n\r\n;","angular.module('pmkr.offset', [])\r\n\r\n.filter('pmkr.offset', [\r\n  function() {\r\n\r\n    function filter(input, offset) {\r\n\r\n      if (!input || !input.length) { return input; }\r\n\r\n      offset = parseInt(offset, 10);\r\n      return input.slice(offset);\r\n\r\n    }\r\n\r\n    return filter;\r\n\r\n  }\r\n])\r\n\r\n;","angular.module('pmkr.partition', [\r\n  'pmkr.filterStabilize'\r\n])\r\n\r\n.filter('pmkr.partition', [\r\n  'pmkr.filterStabilize',\r\n  function(stabilize) {\r\n\r\n    var filter = stabilize(function(input, size) {\r\n\r\n      if (!input || !size) {\r\n        return input;\r\n      }\r\n\r\n      var newArr = [];\r\n\r\n      for (var i = 0; i < input.length; i+= size) {\r\n        newArr.push(input.slice(i, i+size));\r\n      }\r\n\r\n      return newArr;\r\n\r\n    });\r\n\r\n    return filter;\r\n\r\n  }\r\n])\r\n\r\n;","angular.module('pmkr.shuffle', [\r\n  'pmkr.filterStabilize'\r\n])\r\n\r\n.filter('pmkr.shuffle', [\r\n  'pmkr.filterStabilize',\r\n  function(stabilize) {\r\n\r\n    var filter = stabilize(function(input) {\r\n\r\n      if (!input) { return input; }\r\n\r\n      if (typeof input === 'string') {\r\n        input = input.split('');\r\n        shuffle(input);\r\n        return input.join('');\r\n      } else {\r\n        shuffle(input);\r\n      }\r\n\r\n    });\r\n\r\n    // Fisher-Yates shuffle (https:github.com/coolaj86/knuth-shuffle)\r\n    function shuffle(arr) {\r\n\r\n      var currentIndex = arr.length;\r\n\r\n      while (0 !== currentIndex) {\r\n\r\n        var randomIndex = Math.floor(Math.random() * currentIndex);\r\n        currentIndex-= 1;\r\n\r\n        var temporaryValue = arr[currentIndex];\r\n        arr[currentIndex] = arr[randomIndex];\r\n        arr[randomIndex] = temporaryValue;\r\n      }\r\n\r\n      return arr;\r\n\r\n    }\r\n\r\n    return filter;\r\n\r\n  }\r\n])\r\n\r\n;","angular.module('pmkr.slugify', [])\r\n\r\n.filter('pmkr.slugify', [\r\n  function() {\r\n\r\n    function filter(str) {\r\n\r\n      if (!str) { return str; }\r\n\r\n      var slug = str\r\n        .toLowerCase()\r\n        .replace(/ /g, '-')\r\n        .replace(/[^\\w-]+/g, '')\r\n      ;\r\n\r\n      return slug;\r\n\r\n    }\r\n\r\n    return filter;\r\n\r\n  }\r\n])\r\n\r\n;","angular.module('pmkr.spaceSentences', [])\r\n\r\n.filter('pmkr.spaceSentences', [\r\n  function() {\r\n\r\n    function filter(str) {\r\n\r\n      if (!str) { return str; }\r\n\r\n      var spaced = str.replace(/(\\w)([.!?]+)(\\w)/gi, '$1$2 $3');\r\n\r\n      return spaced;\r\n\r\n    }\r\n\r\n    return filter;\r\n\r\n  }\r\n])\r\n\r\n;","angular.module('pmkr.stripTags', [])\r\n\r\n.filter('pmkr.stripTags', function () {\r\n\r\n  function filter(str, tags, disallow)  {\r\n\r\n    if (!str) { return str; }\r\n\r\n    tags = tags ? tags.split(',') : '';\r\n\r\n    var regexp = /<\\/?([a-z][a-z0-9]*)\\b[^>]*>/gi;\r\n\r\n    var stripped = str.replace(regexp, function($0, $1) {\r\n      var found = ~tags.indexOf($1.toLowerCase());\r\n      var replace = disallow ? found : !found;\r\n      var replacement = !replace ? $0 : '';\r\n      return replacement;\r\n    });\r\n\r\n    return stripped;\r\n\r\n  }\r\n\r\n  return filter;\r\n\r\n})\r\n\r\n;","angular.module('pmkr.debounce', [])\r\n\r\n.factory('pmkr.debounce', [\r\n  '$timeout',\r\n  '$q',\r\n  function($timeout, $q) {\r\n\r\n    var service = function() {\r\n      return debounceFactory.apply(this, arguments);\r\n    };\r\n    service.immediate = function() {\r\n      return debounceImmediateFactory.apply(this, arguments);\r\n    };\r\n    service.latest = function() {\r\n      return debounceLatestFactory.apply(this, arguments);\r\n    };\r\n\r\n    function debounceFactory(fn, wait) {\r\n\r\n      var timeoutPromise;\r\n\r\n      function debounced() {\r\n\r\n        var deferred = $q.defer();\r\n\r\n        var context = this;\r\n        var args = arguments;\r\n\r\n        $timeout.cancel(timeoutPromise);\r\n\r\n        timeoutPromise = $timeout(function() {\r\n          deferred.resolve(fn.apply(context, args));\r\n        }, wait);\r\n\r\n        return deferred.promise;\r\n\r\n      }\r\n\r\n      return debounced;\r\n\r\n    }\r\n\r\n    function debounceImmediateFactory(fn, wait) {\r\n\r\n      var timeoutPromise;\r\n\r\n      function debounced() {\r\n\r\n        var deferred = $q.defer();\r\n\r\n        var context = this;\r\n        var args = arguments;\r\n\r\n        if (!timeoutPromise) {\r\n          deferred.resolve(fn.apply(context, args));\r\n          // return here?\r\n        }\r\n\r\n        $timeout.cancel(timeoutPromise);\r\n        timeoutPromise = $timeout(function() {\r\n          timeoutPromise = null;\r\n        }, wait);\r\n\r\n        return deferred.promise;\r\n\r\n      }\r\n\r\n      return debounced;\r\n\r\n    }\r\n\r\n    function debounceLatestFactory(fn) {\r\n\r\n      var latestArgs;\r\n\r\n      function debounced() {\r\n\r\n        var args = latestArgs = JSON.stringify(arguments);\r\n\r\n        var deferred = $q.defer();\r\n\r\n        fn.apply(this, arguments).then(function(res) {\r\n          if (latestArgs === args) {\r\n            deferred.resolve(res);\r\n          }\r\n        }, function(res) {\r\n          if (latestArgs === args) {\r\n            deferred.reject(res);\r\n          }\r\n        });\r\n\r\n        return deferred.promise;\r\n\r\n      }\r\n\r\n      return debounced;\r\n\r\n    }\r\n\r\n    return service;\r\n\r\n  }\r\n])\r\n\r\n;","angular.module('pmkr.memoize', [])\r\n\r\n.factory('pmkr.memoize', [\r\n  function() {\r\n\r\n    function service() {\r\n      return memoizeFactory.apply(this, arguments);\r\n    }\r\n\r\n    function memoizeFactory(fn) {\r\n\r\n      var cache = {};\r\n\r\n      function memoized() {\r\n\r\n        var args = [].slice.call(arguments);\r\n\r\n        var key = JSON.stringify(args);\r\n\r\n        var fromCache = cache[key];\r\n        if (fromCache) {\r\n          return fromCache;\r\n        }\r\n\r\n        cache[key] = fn.apply(this, arguments);\r\n\r\n        return cache[key];\r\n\r\n      }\r\n\r\n      return memoized;\r\n\r\n    }\r\n\r\n    return service;\r\n\r\n  }\r\n])\r\n\r\n;","angular.module('pmkr.filterStabilize', [\r\n  'pmkr.memoize'\r\n])\r\n\r\n.factory('pmkr.filterStabilize', [\r\n  'pmkr.memoize',\r\n  function(memoize) {\r\n\r\n    function service(fn) {\r\n\r\n      function filter() {\r\n        var args = [].slice.call(arguments);\r\n        // always pass a copy of the args so that the original input can't be modified\r\n        args = angular.copy(args);\r\n        // return the `fn` return value or input reference (makes `fn` return optional)\r\n        var filtered = fn.apply(this, args) || args[0];\r\n        return filtered;\r\n      }\r\n\r\n      var memoized = memoize(filter);\r\n\r\n      return memoized;\r\n\r\n    }\r\n\r\n    return service;\r\n\r\n  }\r\n])\r\n\r\n;","angular.module('pmkr.rethrowException', [])\r\n\r\n.provider('pmkr.rethrowException', [\r\n  '$provide',\r\n  function($provide) {\r\n\r\n    this.init = function() {\r\n      $provide.decorator('$exceptionHandler', [\r\n        '$delegate',\r\n        decorator\r\n      ]);\r\n    };\r\n\r\n    function decorator($delegate) {\r\n\r\n      function decorated(exception, cause) {\r\n        $delegate(exception, cause);\r\n        throw exception;\r\n      }\r\n\r\n      return decorated;\r\n\r\n    }\r\n\r\n    this.$get = function() {};\r\n\r\n  }\r\n])\r\n\r\n;","describe('pristineOriginal', function() {\r\n\r\n  var $compile;\r\n  var $scope;\r\n  var $formElem;\r\n  var $inputElem;\r\n\r\n  beforeEach(module('pmkr.pristineOriginal'));\r\n\r\n  beforeEach(inject(function(_$compile_, _$rootScope_){\r\n    $compile = _$compile_;\r\n    $scope = _$rootScope_;\r\n\r\n    $scope.opts = {};\r\n    $formElem = angular.element('<form name=\"form\"></form>');\r\n    $inputElem = angular.element('<input name=\"foo\" ng-model=\"foo\" pmkr-pristine-original=\"opts\">');\r\n    $formElem.append($inputElem);\r\n  }));\r\n\r\n  it('should return ngModel to pristine when original value is empty and value becomes empty again', function() {\r\n    $compile($formElem)($scope);\r\n    $scope.$digest();\r\n\r\n    $scope.form.foo.$setViewValue('abc');\r\n    $scope.$digest();\r\n    expect($scope.form.foo.$dirty).toBe(true);\r\n\r\n    $scope.form.foo.$setViewValue('');\r\n    $scope.$digest();\r\n    expect($scope.form.foo.$pristine).toBe(true);\r\n  });\r\n\r\n  it('should return ngModel to pristine when original value is \"abc\" and value becomes \"abc\" again', function() {\r\n    $scope.foo = 'abc';\r\n    $compile($formElem)($scope);\r\n    $scope.$digest();\r\n\r\n    $scope.form.foo.$setViewValue('123');\r\n    $scope.$digest();\r\n    expect($scope.form.foo.$dirty).toBe(true);\r\n\r\n    $scope.form.foo.$setViewValue('abc');\r\n    $scope.$digest();\r\n    expect($scope.form.foo.$pristine).toBe(true);\r\n  });\r\n\r\n  it('should return ngModel to pristine when original value is \"abc\" and value becomes \"Abc\" if `opts.caseSensitive:false`', function() {\r\n    $scope.foo = 'abc';\r\n    $scope.opts.caseSensitive = false;\r\n    $compile($formElem)($scope);\r\n    $scope.$digest();\r\n\r\n    $scope.form.foo.$setViewValue('Abc');\r\n    $scope.$digest();\r\n    expect($scope.form.foo.$pristine).toBe(true);\r\n  });\r\n\r\n});","describe('validateCustom', function() {\r\n\r\n  var $compile;\r\n  var $scope;\r\n  var $provide;\r\n  var $formElem;\r\n  var $inputElem;\r\n\r\n  beforeEach(module('pmkr.validateCustom'));\r\n\r\n  beforeEach(module(['$provide', function(_$provide_) {\r\n\r\n    $provide = _$provide_;\r\n\r\n    $provide.factory('pmkr.debounce', function($q) {\r\n      function debounce(fn) {\r\n        return function() {\r\n          return $q.when(fn());\r\n        }\r\n      }\r\n      var service = debounce;\r\n      service.latest = debounce;\r\n      return service;\r\n    });\r\n\r\n  }]));\r\n\r\n  beforeEach(inject(function(_$compile_, _$rootScope_){\r\n    $compile = _$compile_;\r\n    $scope = _$rootScope_;\r\n\r\n    $formElem = angular.element('<form name=\"form\"></form>');\r\n    $inputElem = angular.element('<input name=\"foo\" ng-model=\"foo\">');\r\n    $formElem.append($inputElem);\r\n    $scope.opts = {name:'unique'};\r\n  }));\r\n\r\n  it('should accept argument object as view string', function() {\r\n    $scope.fooValid = function() {};\r\n    spyOn($scope, 'fooValid');\r\n    $inputElem.attr('pmkr-validate-custom', \"{name:'unique', fn:fooValid}\");\r\n    $compile($formElem)($scope);\r\n    $scope.$digest();\r\n    expect($scope.fooValid).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should accept argument object from controller', function() {\r\n    $scope.opts.fn = function() {};\r\n\r\n    spyOn($scope.opts, 'fn');\r\n    $inputElem.attr('pmkr-validate-custom', 'opts');\r\n    $compile($formElem)($scope);\r\n    $scope.$digest();\r\n    expect($scope.opts.fn).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should initially be valid', function() {\r\n    $inputElem.attr('pmkr-validate-custom', 'opts');\r\n    $compile($formElem)($scope);\r\n    expect($scope.form.foo.$error.unique).toBeFalsy();\r\n  });\r\n\r\n  it('should not call `opts.fn` when gated', function() {\r\n    $scope.opts.fn = function(){};\r\n    $scope.opts.gate = function() { return true; };\r\n\r\n    spyOn($scope.opts, 'fn');\r\n    $inputElem.attr('pmkr-validate-custom', 'opts');\r\n    $compile($formElem)($scope);\r\n    $scope.$digest();\r\n    expect($scope.opts.fn).not.toHaveBeenCalled();\r\n  });\r\n\r\n  it('should be valid when gated', function() {\r\n    $scope.opts.gate = function() { return true; };\r\n\r\n    $inputElem.attr('pmkr-validate-custom', 'opts');\r\n    $compile($formElem)($scope);\r\n    $scope.form.foo.$setValidity('unique', false);\r\n    $scope.$digest();\r\n    expect($scope.form.foo.$error.unique).toBeFalsy();\r\n  });\r\n\r\n  it('should wrap `opts.fn` in `debounce` and `debounce.latest`', function() {\r\n    var debounced = false;\r\n    var debouncedLatest = false;\r\n\r\n    $provide.decorator('pmkr.debounce', function($q) {\r\n      var debounce = function() {\r\n        debounced = true;\r\n      };\r\n      debounce.latest = function() {\r\n        debouncedLatest = true;\r\n      };\r\n      return debounce;\r\n    });\r\n\r\n    $inputElem.attr('pmkr-validate-custom', 'opts');\r\n    $compile($formElem)($scope);\r\n\r\n    expect(debounced).toBe(true);\r\n    expect(debouncedLatest).toBe(true);\r\n  });\r\n\r\n  it('should be valid when `opts.fn` returns `true`', function() {\r\n    $scope.opts.fn = function() { return true; };\r\n\r\n    $inputElem.attr('pmkr-validate-custom', 'opts');\r\n    $compile($formElem)($scope);\r\n    $scope.form.foo.$setValidity('unique', false);\r\n    $scope.$digest();\r\n    expect($scope.form.foo.$error.unique).toBeFalsy();\r\n  });\r\n\r\n  it('should set $error[opts.name] `true` when `opts.fn` returns `false`', function() {\r\n    $scope.opts.fn = function() { return false; };\r\n\r\n    $inputElem.attr('pmkr-validate-custom', 'opts');\r\n    $compile($formElem)($scope);\r\n    $scope.form.foo.$setValidity('unique', false);\r\n    $scope.$digest();\r\n    expect($scope.form.foo.$error.unique).toBe(true);\r\n  });\r\n\r\n  it('should set `props.pending` `true` while debouncing/validating', function() {\r\n\r\n    $provide.decorator('pmkr.debounce', function($q) {\r\n      function debounce(fn) {\r\n        return function() {\r\n          expect($scope.fooProps.pending).toBe(true);\r\n          return $q.when(fn());\r\n        };\r\n      }\r\n      var service = debounce;\r\n      service.latest = debounce\r\n      return service;\r\n    });\r\n\r\n    $scope.opts.props = 'fooProps';\r\n    $scope.opts.fn = function() {\r\n      expect($scope.fooProps.pending).toBe(true);\r\n    };\r\n\r\n    $inputElem.attr('pmkr-validate-custom', 'opts');\r\n    $compile($formElem)($scope);\r\n    expect($scope.fooProps.pending).toBe(false);\r\n    $scope.$digest();\r\n    expect($scope.fooProps.pending).toBe(false);\r\n  });\r\n\r\n  it('should set `props.validating` `true` while validating', function() {\r\n\r\n    $provide.decorator('pmkr.debounce', function($q) {\r\n      function debounce(fn) {\r\n        return function() {\r\n          expect($scope.fooProps.validating).toBe(false);\r\n          return $q.when(fn());\r\n        };\r\n      }\r\n      var service = debounce;\r\n      service.latest = debounce\r\n      return service;\r\n    });\r\n\r\n    $scope.opts.props = 'fooProps';\r\n    $scope.opts.fn = function() {\r\n      expect($scope.fooProps.validating).toBe(true);\r\n    };\r\n\r\n    $inputElem.attr('pmkr-validate-custom', 'opts');\r\n    $compile($formElem)($scope);\r\n    expect($scope.fooProps.validating).toBe(false);\r\n    $scope.$digest();\r\n    expect($scope.fooProps.validating).toBe(false);\r\n  });\r\n\r\n  it('should set `props.pending`,`props.validating` to `false` when gated', function () {\r\n    $scope.opts.gate = function() { return true; };\r\n    $scope.opts.props = 'fooProps';\r\n\r\n    $inputElem.attr('pmkr-validate-custom', 'opts');\r\n    $compile($formElem)($scope);\r\n    expect($scope.fooProps.pending).toBe(false);\r\n    expect($scope.fooProps.validating).toBe(false);\r\n    $scope.fooProps.pending = true;\r\n    $scope.fooProps.validating = true;\r\n    $scope.$digest();\r\n    expect($scope.fooProps.pending).toBe(false);\r\n    expect($scope.fooProps.validating).toBe(false);\r\n  });\r\n\r\n  it('should set `props.checkedValue` to the most recent checked value', function() {\r\n    $scope.opts.fn = function() { return true; };\r\n    $scope.opts.props = 'fooProps';\r\n\r\n    $inputElem.attr('pmkr-validate-custom', 'opts');\r\n    $compile($formElem)($scope);\r\n    expect($scope.fooProps.checkedValue).toBe(null);\r\n    $scope.form.foo.$setViewValue('abc');\r\n    $scope.$digest();\r\n    expect($scope.fooProps.checkedValue).toBe('abc');\r\n  });\r\n\r\n  it('should initially set `props.valid` and `props.invalid` to `null`', function() {\r\n    $scope.opts.props = 'fooProps';\r\n\r\n    $inputElem.attr('pmkr-validate-custom', 'opts');\r\n    $compile($formElem)($scope);\r\n    expect($scope.fooProps.valid).toBe(null);\r\n    expect($scope.fooProps.invalid).toBe(null);\r\n  });\r\n\r\n  it('should set `props.valid` and `props.invalid` to `null` when gated', function() {\r\n    $scope.opts.props = 'fooProps';\r\n    $scope.opts.gate = function() { return true; };\r\n\r\n    $inputElem.attr('pmkr-validate-custom', 'opts');\r\n    $compile($formElem)($scope);\r\n    $scope.$digest();\r\n    expect($scope.fooProps.valid).toBe(null);\r\n    expect($scope.fooProps.invalid).toBe(null);\r\n  });\r\n\r\n  it('should set `props.valid` and `props.invalid` to result after validating', function() {\r\n    $scope.opts.fn = function() { return true; };\r\n    $scope.opts.props = 'fooProps';\r\n\r\n    $inputElem.attr('pmkr-validate-custom', 'opts');\r\n    $compile($formElem)($scope);\r\n    $scope.$digest();\r\n    expect($scope.fooProps.valid).toBe(true);\r\n    expect($scope.fooProps.invalid).toBe(false);\r\n  });\r\n\r\n});","describe('debounce', function() {\r\n\r\n  var $timeout;\r\n  var debounce;\r\n\r\n  beforeEach(module('pmkr.debounce'));\r\n\r\n  beforeEach(inject(function(_$timeout_) {\r\n    $timeout = _$timeout_;\r\n  }));\r\n\r\n  beforeEach(inject(['pmkr.debounce', function(_debounce_) {\r\n    debounce = _debounce_;\r\n  }]));\r\n\r\n  describe('(main)', function() {\r\n\r\n    it(\"stuff\", function() {\r\n      var called = 0;\r\n      function fn() {\r\n        ++called;\r\n      }\r\n      var debouncedFn = debounce(fn, 100);\r\n      debouncedFn();\r\n      debouncedFn();\r\n      expect(called).toBe(0);\r\n      $timeout.flush(100);\r\n      expect(called).toBe(1);\r\n    });\r\n\r\n  });\r\n\r\n});","describe('memoize', function() {\r\n\r\n  var memoize;\r\n\r\n  beforeEach(module('pmkr.memoize'));\r\n\r\n  beforeEach(inject(['pmkr.memoize', function(_memoize_) {\r\n    memoize = _memoize_;\r\n  }]));\r\n\r\n  it('should return a function that returns the same value when called again with the same arguments', function() {\r\n    var x = 0;\r\n    var memoizedFn = memoize(function() {\r\n      return ++x;\r\n    });\r\n    var result = memoizedFn();\r\n    expect(memoizedFn()).toBe(result);\r\n    expect(memoizedFn()).toBe(result);\r\n    result = memoizedFn(1);\r\n    expect(memoizedFn(1)).toBe(result);\r\n  });\r\n\r\n  it('should return a function that returns a new value when called again with different arguments', function() {\r\n    var memoizedFn = memoize(function(arg) {\r\n      return arg+1;\r\n    });\r\n    var result = memoizedFn(1);\r\n    expect(memoizedFn(2)).not.toBe(result);\r\n  });\r\n\r\n});","describe('filterStabilize', function() {\r\n\r\n  var $filterProvider;\r\n  var $compile;\r\n  var $scope;\r\n\r\n  beforeEach(module('pmkr.filterStabilize'));\r\n\r\n  beforeEach(module(function(_$filterProvider_) {\r\n    $filterProvider = _$filterProvider_;\r\n  }));\r\n\r\n  beforeEach(inject(function(_$rootScope_, _$compile_) {\r\n    $compile = _$compile_;\r\n    $scope = _$rootScope_;\r\n  }));\r\n\r\n  it('is needed to prevent infinite digest when filter is unstable', function() {\r\n    $filterProvider.register('testFilter', function() {\r\n      var i = 0;\r\n      return function() { return ++i; };\r\n    });\r\n    var elem = angular.element(\"<p>{{'abc'|testFilter}}</p>\");\r\n    $compile(elem)($scope);\r\n    expect($scope.$digest.bind($scope)).toThrow();\r\n  });\r\n\r\n  it('stabilizes unstable filter', function() {\r\n    $filterProvider.register('testFilter', ['pmkr.filterStabilize', function(stabilize) {\r\n      var i = 0;\r\n      return stabilize(function() { return ++i; });\r\n    }]);\r\n    var elem = angular.element(\"<p>{{'abc'|testFilter}}</p>\");\r\n    $compile(elem)($scope);\r\n    expect($scope.$digest.bind($scope)).not.toThrow();\r\n  });\r\n\r\n  it('prevents filter from modifying original input reference', function() {\r\n    $filterProvider.register('testFilter', ['pmkr.filterStabilize', function(stabilize) {\r\n      return stabilize(function(arr) {\r\n        arr[0] = 'abc';\r\n        return arr;\r\n      });\r\n    }]);\r\n    $scope.foo = [1,2,3];\r\n    var elem = angular.element(\"<p>{{foo|testFilter}}</p>\");\r\n    $compile(elem)($scope);\r\n    $scope.$digest();\r\n    expect($scope.foo).toEqual([1,2,3]);\r\n  });\r\n\r\n  it('makes `return` of input reference optional', function() {\r\n    $filterProvider.register('testFilter', ['pmkr.filterStabilize', function(stabilize) {\r\n      return stabilize(function(arr) { arr[0] = 'abc' });\r\n    }]);\r\n    $scope.foo = [1,2,3];\r\n    var elem = angular.element(\"<p>{{foo|testFilter}}</p>\");\r\n    $compile(elem)($scope);\r\n    $scope.$digest();\r\n    expect($scope.$eval(elem.text())).toEqual(['abc',2,3]);\r\n  });\r\n\r\n});"],"sourceRoot":"/source/"}